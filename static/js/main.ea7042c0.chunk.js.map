{"version":3,"sources":["AddTaskModal.js","EditModalTask.js","Board.js","App.js","redux/reduser.js","redux/store.js","index.js"],"names":["connect","state","tasks","list","dispatch","addTask","newName","type","payload","props","useState","isModalOpen","setIsModalOpen","setNewName","Button","onClick","Modal","isOpen","ModalHeader","ModalBody","Label","htmlFor","Input","value","onChange","e","target","ModalFooter","closeModal","editTask","cardId","initialEditName","name","cardName","get","console","log","setInitialEditName","useEffect","changeModalStatus","editModal","editModalOpen","deleteTask","deleteAllTask","moveUp","index","moveDown","openEditModal","card","listOfCards","Container","map","el","i","key","id","disabled","length","App","initialState","status","priority","columns","kanbanControlPanel","action","filter","Math","random","splice","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea7042c0.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport {Modal, Button, ModalHeader, ModalBody, ModalFooter, Label, Input} from \"reactstrap\";\n\nfunction AddTaskModal(props) {\n\n\n    const [isModalOpen, setIsModalOpen] = useState(false)\n    const [newName, setNewName] = useState('')\n\n    const addButtonHandler = () => {\n        props.addTask(newName)\n        setIsModalOpen(false)\n        setNewName('')\n    }\n\n\n    return (\n        <>\n            <Button onClick={() => setIsModalOpen(true)}>Add New</Button>\n            <Modal isOpen={isModalOpen}>\n                <ModalHeader> Add new Task </ModalHeader>\n                <ModalBody>\n                    <Label htmlFor=''>New Card Name:</Label>\n                    <Input type='text' value={newName} onChange={(e) => setNewName(e.target.value)}/>\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={addButtonHandler}>Add</Button>\n                    <Button onClick={() => setIsModalOpen(false)}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    tasks: state.list\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    addTask: (newName) => dispatch({type: 'ADD_TASK', payload: newName})                  // dispatch отправь объект(action) в редюсер\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTaskModal);\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport {Modal, Button, ModalHeader, ModalBody, ModalFooter, Label, Input} from \"reactstrap\";\nimport {get} from 'lodash'\n\n\nfunction EditModalTask(props) {\n\n    const cardName = get(props, 'editModal.card.name', '')\n    const cardId = get(props, 'editModal.card.id', '')\n    console.log(props)\n    console.log('cardName', cardName)\n    const [initialEditName, setInitialEditName] = useState('')\n    console.log({initialEditName})\n\n    useEffect(()=> {\n        setInitialEditName(cardName)\n    },[cardName])\n\n    return (\n        <>\n            <Button onClick={() => props.changeModalStatus()}>Edit</Button>\n            <Modal isOpen={props.editModal.isOpen}>\n                <ModalHeader> Edit Task </ModalHeader>\n                <ModalBody>\n                    <Label htmlFor=''>Edit task:</Label>\n                    <Input type='text' value={initialEditName} onChange={(e) => setInitialEditName(e.target.value)}/>\n                </ModalBody>\n                <ModalFooter>\n                    <Button onClick={()=> props.editTask({cardId, initialEditName})} >Add</Button>\n                    <Button onClick={() => props.closeModal()}>Cancel</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    closeModal: () => dispatch({type: 'CLOSE_EDIT_MODAL'}),\n    editTask: ({cardId, initialEditName}) => dispatch({type: 'EDIT_TASK', payload: {cardId, name: initialEditName}  })\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditModalTask);\n","import React, {useState} from 'react';\nimport './App.css';\nimport {connect} from \"react-redux\";\nimport AddTaskModal from \"./AddTaskModal\";\nimport {Container, Button} from 'reactstrap'\nimport EditModalTask from \"./EditModalTask\";\n\nfunction Board(props) {\n\n    const listOfCards = props.tasks\n\n    return (\n        <div>\n            <Container>\n                <AddTaskModal/>\n                <EditModalTask editModal={props.editModal}/>\n                {listOfCards.map((el, i) =>\n                    <li key={el.id}>\n                        {el.name}\n                        <Button onClick={() => props.deleteTask(el.id)}>Delete</Button>\n                        <Button onClick={() => props.moveUp(i)} disabled={i === 0}>⇧</Button>\n                        <Button onClick={() => props.moveDown(i)} disabled={i === props.tasks.length - 1}>⇩</Button>\n                        <Button onClick={() => props.openEditModal(el)}>Edit</Button>\n\n                        {/*<Button onClick={()=> setIsModalOpen()}> Cancel </Button>*/}\n                    </li>)}\n                <Button onClick={props.deleteAllTask}>Delete All</Button>\n            </Container>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    tasks: state.list,\n    editModal: state.editModalOpen\n\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    deleteTask: (cardId) => dispatch({type: 'TASK_DELETE', payload: cardId}),   // dispatch отправь объект(action) в редюсер\n    deleteAllTask: () => dispatch({type: 'DELETE_ALL_TASKS'}),\n    moveUp: (index) => dispatch({type: 'MOVE_UP', payload: index}),\n    moveDown: (index) => dispatch({type: 'MOVE_DOWN', payload: index}),\n    openEditModal: (card) => dispatch({type: 'OPEN_EDIT_MODAL', payload: card})\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","import React from 'react';\nimport './App.css';\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div>\n        <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\r\n    list: [\r\n        {id: 1, status: 'todo', priority: 1, name: 'Text 1'},\r\n        {id: 2, status: 'progress', priority: 2, name: 'Text 2'},\r\n        {id: 3, status: 'review', priority: 3, name: 'Text 3'},\r\n        {id: 4, status: 'done', priority: 4, name: 'Text 4'}\r\n    ],\r\n    columns:\r\n        [\r\n            {id: 1, status: 'todo', priority: 1, name: 'Text 1'},\r\n            {id: 2, status: 'progress', priority: 2, name: 'Text 2'},\r\n            {id: 3, status: 'review', priority: 3, name: 'Text 3'},\r\n            {id: 4, status: 'done', priority: 4, name: 'Text 4'}\r\n        ],\r\n    editModalOpen: {isOpen: false, card: {}}\r\n};\r\n\r\n\r\n\r\nconst kanbanControlPanel = (state = initialState, action) => {\r\n    switch (action.type) {             //это как if else\r\n\r\n        case 'OPEN_EDIT_MODAL':\r\n            return {...state, editModalOpen: {isOpen: true, card: action.payload}}\r\n\r\n        case 'CLOSE_EDIT_MODAL':\r\n            return {...state, editModalOpen: {isOpen: false, card: {}}}\r\n\r\n        case 'EDIT_TASK':\r\n            console.log(action.payload)\r\n            return {...state, editModalOpen:{isOpen: false, card: {}}, list: state.list.map(el => {\r\n                if (el.id === action.payload.cardId) return {...el, name: action.payload.name}\r\n                  return el\r\n                })}\r\n\r\n        case 'TASK_DELETE':              // этокак else и возвражает default\r\n            return {...state, list: state.list.filter(el => el.id !== action.payload)}\r\n\r\n\r\n        case 'ADD_TASK':\r\n            return {\r\n                ...state,\r\n                list: [...state.list, {id: Math.random(), name: action.payload, priority: 3, status: 'done'}]\r\n            }\r\n\r\n        case 'DELETE_ALL_TASKS':\r\n            return {\r\n                ...state,\r\n                list: []\r\n            }\r\n\r\n        case 'MOVE_UP':\r\n            console.log(action.payload)\r\n            let moveUp = [...state.list]\r\n        moveUp.splice(action.payload -1, 0, moveUp.splice(action.payload, 1)[0])\r\n            return {\r\n                ...state,\r\n                list: moveUp\r\n            }\r\n                // list: state.list.map((el, i) => {\r\n                //     let indexCurrent = action.payload.listIndexCurrent;\r\n                //     let indexPrevious = action.payload.listIndexPrevious;\r\n                //     if (i === indexCurrent) return state.list[indexPrevious]\r\n                //     if (i === indexPrevious) return state.list[indexCurrent]\r\n                //     return el\r\n                // })\r\n\r\n                // return moveUp;\r\n                // -----------------------------------\r\n                // const moveUp = (i) => {\r\n                 //     if (i !== 0) {\r\n                 //         const newList = [...list]\r\n                 //         newList.splice(i - 1, 0, newList.splice(i, 1)[0])\r\n                 //         setList(newList)\r\n                 //     }\r\n                 // }\r\n                 // -----------------------------------------\r\n        case 'MOVE_DOWN':\r\n            console.log('MOVE_DOWN', action.payload)\r\n            let moveDown = [...state.list]\r\n            moveDown.splice(action.payload +1, 0, moveDown.splice(action.payload, 1)[0])\r\n            return {\r\n                ...state,\r\n                list: moveDown\r\n            }\r\n        // case 'TASK_EDIT_SAVE':\r\n        //     let editedId = action.payload.editedId;\r\n        //     let initialEditName = action.payload.initialEditName;\r\n        //     console.log(editedId, initialEditName)\r\n        //     return {\r\n        //\r\n        //     }\r\n\r\n\r\n            // const taskEditSave = () => {\r\n            //     const newEditSave =\r\n            //         console.log(\"--------\", editedId)\r\n            //     console.log(\"--------\", initialEditName)\r\n            // }\r\n            // const onEditTask = (id, task) => {\r\n            //     const updatedTasks = tasks.map(el => {\r\n            //         if(el.id === id)\r\n            //             return {...el, name: task}\r\n            //         else return el;\r\n            //     })\r\n            //     setTasks(updatedTasks);\r\n            // };\r\n\r\n        default:\r\n\r\n            return state;\r\n    }\r\n};\r\nexport default kanbanControlPanel","import { createStore, applyMiddleware} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport kanbanControlPanel from \"./reduser\";\n\nconst store = createStore(kanbanControlPanel, composeWithDevTools(\n    applyMiddleware(),\n));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport store from \"./redux/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}